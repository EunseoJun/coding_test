# 상어 초등학교
# https://www.acmicpc.net/problem/21608

# 교실 N*N => (1, 1)
# 한 칸에는 학생 한 명, abs(r1-r2)+abs(c1-c2)=1을 만족하는 두 칸이 인접함
# 1. 비어있는 칸 중에서 좋아하는 학생이 인접한 칸에 가장 많은 칸으로
# => def like_student() return=> 조건 만족 리스트
# 2. 1을 만족하는 칸이 여러개 => 인접한 칸 중에서 비어있는 칸이 가장 많은 자리로
#=> 리스트 길이=1, 그냥 받기, 여러개면 def cnt_empty() => 조건 만족
# 3. 2를 만족하는 칸도 여러개, 행작열작
#=> list 받아서 그냥 sort
# 4. arr에 지정하기

dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]



N = int(input())
student = [list(map(int, input().split())) for _ in range(N*N)]
arr = [[0]*N for _ in range(N)]
std_like_set = [0]*(N*N+1)
# print(std_like_set)

def like_student(sidx, l1, l2, l3, l4):
    like_set = [l1, l2, l3, l4]
    mx_like = 0
    mx_seat = []
    std_like_set[sidx] = [l1, l2, l3, l4]

    for i in range(N):
        for j in range(N):
            temp_cnt = 0
            if arr[i][j] == 0:
                for dr in range(4):
                    ni, nj = i+dx[dr], j+dy[dr]
                    if 0<=ni<N and 0<=nj<N and arr[ni][nj] in like_set:
                        temp_cnt+=1
                if temp_cnt>mx_like:
                    mx_like = temp_cnt
                    mx_seat = [(i, j)]
                elif temp_cnt==mx_like:
                    mx_seat.append((i,j))
    return mx_seat



for i in range(len(student)):
    sidx, l1, l2, l3, l4 = student[i]
    # 1. 비어있는 칸 중에서 좋아하는 학생이 인접한 칸에 가장 많은 칸으로
    # => def like_student() return=> 조건 만족 리스트
    like_seat = like_student(sidx, l1, l2, l3, l4) #=>return [(i,j), (i,j)...]
    # print(like_seat)
    if len(like_seat)==1:
        ci, cj = like_seat[0]
        arr[ci][cj] = sidx
    elif len(like_seat)>1:
        # like_seat 돌면서 빈자리 개수 따라서 세는 로직
        mx_empty = 0
        mx_seat = []
        for idx in range(len(like_seat)):
            ci, cj = like_seat[idx]
            temp_empty = 0
            for dr in range(4):
                ni, nj = ci+dx[dr], cj+dy[dr]
                if 0<=ni<N and 0<=nj<N and arr[ni][nj] == 0:
                    temp_empty += 1
            if temp_empty>mx_empty:
                mx_empty = temp_empty
                mx_seat = [(ci, cj)]
            elif temp_empty==mx_empty:
                mx_seat.append((ci,cj))
        # 조건 따라서 sort하기
        mx_seat.sort(key=lambda x:(x[0], x[1]))
        # arr에 지정하기
        si, sj = mx_seat[0]
        arr[si][sj] = sidx


result_cnt = []
for i in range(N):
    for j in range(N):
        cnt = 0
        sidx = arr[i][j]
        like = std_like_set[sidx]

        for dr in range(4):
            ni, nj = i+dx[dr], j+dy[dr]
            if 0<=ni<N and 0<=nj<N:
                if arr[ni][nj] in like:
                    cnt += 1
        result_cnt.append(cnt)

result = result_cnt.count(1)+result_cnt.count(2)*10+result_cnt.count(3)*100+result_cnt.count(4)*1000
print(result)
