# https://www.codetree.ai/ko/frequent-problems/samsung-sw/problems/mint-choco-milk/description
# 삼성기출



# 1. 아침: 모두가 신앙심 +1
# 2. 점심: 신봉 음식이 완전히 같을 때만 그룹: 상하좌우
# 2-1. 1. 신앙심 가장 큰 사람, r작, c작
# 2-2. 대표자 제외하고 신앙심 1씩 대표자한테 넘김
# 3. 저녁: 전파 순서: 단일=>이중=>삼중, 신앙심, r작, c작
# 3-1. 간절함으로 바꿔 전파에 사용, 격자 밖, 간절함 0=>종료
# 3-2. 신앙심%4 => 0,1,2,3 => 상하좌우
# 3-3. 한칸씩 이동하면서 전파시도, 격자 나가거나 간절함 0. 전파 종료
# 3-3. 강한전파 x>y: 사상 아예 바꾸기, 전파자 간절함 (y+1) 감소, 전파대상은 +1=>간절함0. 전파 종료
# 3-4. 약한전파 x<=y: 전파대상은 전파한 모든 기본음식에 관심, 전파자 0, 전파대상 신앙심+x
#     => 전파 당한 날은 전파 X
#
#
from collections import deque

dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]


N, T = map(int, input().split()) # N*N 격자, turn
p_arr = [list(input().strip()) for _ in range(N)]
s_arr = [list(map(int, input().split())) for _ in range(N)]
wakeup_turn = [[0]*N for _ in range(N)]

def lunch():
    # 2. 점심: 신봉 음식이 완전히 같을 때만 그룹: 상하좌우
    v = [[0] * N for _ in range(N)]
    group = []
    q = deque()
    for i in range(N):
        for j in range(N):
            if v[i][j] == 0:
                v[i][j] = 1
                cur_pre = set(p_arr[i][j]) # 혹시 중복으로 인한 문자열 변경 우려!!!!
                temp_group = []
                q.append((i, j))
                temp_group.append([i, j, s_arr[i][j]])
                while q:
                    ci, cj = q.popleft()
                    for dr in range(4):
                        ni, nj = ci + dx[dr], cj + dy[dr]
                        if 0 <= ni < N and 0 <= nj < N and set(p_arr[ni][nj]) == cur_pre and v[ni][nj]==0:
                            q.append((ni, nj))
                            temp_group.append([ni, nj, s_arr[ni][nj]])
                            v[ni][nj] = 1

                temp_group.sort(key=lambda x: (x[2], -x[0], -x[1]), reverse=True)
                group.append(temp_group)
    president = []
    for temp_group in group:
        ci, cj = temp_group[0][0], temp_group[0][1]
        for idx in range(1, len(temp_group)):
            ni, nj = temp_group[idx][0], temp_group[idx][1]
            # s_arr 수정
            s_arr[ni][nj] -= 1
            s_arr[ci][cj] += 1
            # 대표자 +1
            temp_group[0][2] += 1
            temp_group[idx][2] -= 1
        president.append(temp_group[0])
    return president

def dinner(president_group):
    # 3. 저녁: 전파 순서: 단일=>이중=>삼중, 신앙심, r작, c작
    for idx in range(len(president_group)):
        pres = president_group[idx]
        i, j  = pres[0], pres[1]
        a = p_arr[i][j]
        b = set(a)
        president_group[idx].append(len(b))
    president_group.sort(key=lambda x:(x[3], -x[2], x[0], x[1]))
    # print(president_group)
    # 3-1. 간절함으로 바꿔 전파에 사용, 격자 밖, 간절함 0=>종료
    for pidx in president_group:
        ci, cj, p, tb = pidx #x, y, 신앙, 선호
        if wakeup_turn[ci][cj] > turn:  continue
        # 3-2. 신앙심%4 => 0,1,2,3 => 상하좌우
        dr = int(p%4)
        b = p-1
        s_arr[ci][cj] = 1 # 1만 남기기
        # 3-3. 한칸씩 이동하면서 전파시도, 격자 나가거나 간절함 0. 전파 종료
        q = deque()
        q.append((ci, cj, b))
        while q:
            si, sj, power = q.popleft()
            ni, nj = si+dx[dr], sj+dy[dr]
            if 0<=ni<N and 0<=nj<N:
                ypower = s_arr[ni][nj] # 피전파자 신앙
                #     => 전파 당한 날은 전파 X
                # 강한 전파
                # 3-3. 강한전파 x>y: 사상 아예 바꾸기, 전파자 간절함 (y+1) 감소, 전파대상은 +1=>간절함0. 전파 종료
                if set(p_arr[si][sj]) != set(p_arr[ni][nj]):
                    if ypower<power:
                        wakeup_turn[ni][nj] = turn+1
                        s_arr[ni][nj] = ypower + 1
                        # 참조 이슈 발생 가능성
                        # temp = p_arr[si][sj]
                        p_arr[ni][nj] = str(p_arr[si][sj])
                        power -= ypower+1
                        if power>0:
                            q.append((ni, nj, power))
                    # 약한 전파
                    # 3-4. 약한전파 x<=y: 전파대상은 전파한 모든 기본음식에 관심, 전파자 0, 전파대상 신앙심+x
                    elif ypower>=power:
                        wakeup_turn[ni][nj] = turn+1
                        s_arr[ni][nj] += power
                        temp = p_arr[si][sj] + p_arr[ni][nj]
                        temp = set(temp)
                        prefer = ""
                        for i in temp:
                            prefer += i
                        p_arr[ni][nj] = prefer
                elif set(p_arr[si][sj]) == set(p_arr[ni][nj]):
                    q.append((ni, nj, power))

            else:
                break
            #  간절함 0=> 종료


for turn in range(1, T+1):
    # 1. 아침 모두에게 +1
    for i in range(N):
        for j in range(N):
            s_arr[i][j] += 1
    president_group = lunch()
    dinner(president_group)
    ans = [0]*7

    for i in range(N):
        for j in range(N):
            prefer = p_arr[i][j]
            if ('M' in prefer) and ('C' in prefer) and ('T' in prefer):
                ans[0] += s_arr[i][j]
            else:
                if ('T' in prefer) and ('C' in prefer):
                    ans[1] += s_arr[i][j]
                elif ('T' in prefer) and ('M' in prefer):
                    ans[2] += s_arr[i][j]
                elif ('M' in prefer) and ('C' in prefer):
                    ans[3] += s_arr[i][j]
                else:
                    if ('M' in prefer):
                        ans[4] += s_arr[i][j]
                    elif ('C' in prefer):
                        ans[5] += s_arr[i][j]
                    elif ('T' in prefer):
                        ans[6] += s_arr[i][j]
    print(*ans)
